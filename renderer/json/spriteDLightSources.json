{
  "comment": [
    "// lighting shader to use SpriteDLight generated normal maps for pseudo-3d effect lighting of 2D sprites",
	"// TODO: currently using 2D only for lighting direction, might be better to use 3D with light a given offset from the drawing plane",
	"// this would avoid odd shadowing when the light source is directly above a sloping surface (the side that slopes away is currently in full shadow)"
    ],

  "fragment": [
    "precision mediump float;",
	
    "uniform sampler2D uImageSampler;",
    "uniform sampler2D uNormalSampler;",
	
    "uniform vec3 uAmbientCol;",
    "uniform vec3 uLightCol;",
    "uniform vec3 uLightPos;",
	
	"uniform vec2 uSrcSize;",

	
    "void main()",
    "{",
	"  vec2 texCoord = gl_FragCoord.xy / uSrcSize;",
    "  vec4 col = texture2D(uImageSampler, texCoord);",
    "  vec3 nrm = texture2D(uNormalSampler, texCoord).rgb * 2.0 - 1.0;",
	"  vec3 off = normalize(uLightPos - vec3(texCoord, 0.0));",
	"  float b = max(dot(normalize(nrm), off), 0.0);",
    "  vec3 c = min(b * uLightCol * col.rgb + uAmbientCol * col.rgb, vec3(1,1,1));",
    "  gl_FragColor = vec4(c, col.a);",
    "}"
    ],

  "vertex": [
    "precision mediump float;",
	
    "attribute vec4 aPosition;",
	
    "void main(void)",
    "{",
	"  gl_Position = aPosition;",
    "}"
    ],

"attributes":
	[ "aPosition" ],
  "uniforms":
    [ "uLightPos", "uLightCol", "uAmbientCol", "uSrcSize" ],
  "samplers":
    [ "uImageSampler", "uNormalSampler" ]
}


