{
  "comment": [
    "// lighting shader to use SpriteDLight generated normal maps for pseudo-3d effect lighting of 2D sprites",
	"// TODO: currently using 2D only for lighting direction, might be better to use 3D with light a given offset from the drawing plane",
	"// this would avoid odd shadowing when the light source is directly above a sloping surface (the side that slopes away is currently in full shadow)"
    ],

  "fragment": [
    "precision mediump float;",
	
	"#define MAX_LIGHTS 8",
	"#define LIGHT_HEIGHT 0.1",
	
    "uniform sampler2D uImageSampler;",
    "uniform sampler2D uNormalSampler;",
	
    "uniform vec3 uAmbientCol;",
	"uniform vec3 uLights[MAX_LIGHTS];",
	
	"uniform vec2 uSrcSize;",

	"vec3 unpack(float val)",
	"{",
	"  vec3 col;",
	"  col.b = floor(val / 256. / 256.);",
	"  col.g = floor((val - col.b * 256. * 256.) / 256.);",
	"  col.r = floor(val - col.b * 256. * 256. - col.g * 256.);",
	"  return col / 16.;",
	"}",
	
    "vec4 getLighting()",
    "{",
	"  vec2 texCoord = gl_FragCoord.xy / uSrcSize;",
    "  vec3 nrm = texture2D(uNormalSampler, texCoord).rgb * 2.0 - 1.0;",
	"  vec3 lightCol = vec3(0,0,0);",
	"  for(int i = 0; i < MAX_LIGHTS; i++)",
	"  {",
	"    vec3 data = uLights[i];",
	"    if (data.z > 0.)",
	"    {",
	"      vec3 off = normalize(vec3(data.xy, LIGHT_HEIGHT) - vec3(texCoord, 0));",
	"      float b = max(dot(normalize(nrm), off), 0.0);",
	"      vec3 pow = unpack(data.z);",
	"      lightCol += b * pow;",
	"    }",
	"  }",
    "  vec4 col = texture2D(uImageSampler, texCoord);",
    "  vec3 c = min(lightCol * col.rgb + uAmbientCol * col.rgb, vec3(1,1,1));",
    "  return vec4(c, col.a);",
	"}",
	
    "void main()",
    "{",
    "  gl_FragColor = getLighting();",
    "}"
    ],

  "vertex": [
    "precision mediump float;",
	
    "attribute vec4 aPosition;",
	
    "void main(void)",
    "{",
	"  gl_Position = aPosition;",
    "}"
    ],

"attributes":
	[ "aPosition" ],
  "uniforms":
    [ "uLights", "uAmbientCol", "uSrcSize" ],
  "samplers":
    [ "uImageSampler", "uNormalSampler" ]
}


