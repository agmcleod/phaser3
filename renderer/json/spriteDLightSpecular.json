{
  "comment": [
    "// lighting shader to use SpriteDLight generated normal and specular maps for pseudo-3d effect lighting of 2D sprites",
	"// TODO: should use vec2 for aPosition instead of vec4 - reduce the amount of data per vertex",
	"// TODO: put the specular multiplier image into the alpha channel of the surface normals to eliminate one extra texture"
    ],

  "fragment": [
    "precision highp float;",
	
    "uniform sampler2D uImageSampler;",
    "uniform sampler2D uNormalSampler;",
    "uniform sampler2D uSpecularSampler;",
	
	"uniform float uSpecularMult;",
    "uniform vec3 uSpecularCol;",
    "uniform vec3 uAmbientCol;",
    "uniform vec3 uLightCol;",
    "uniform vec3 uLightPos;",
	
	"uniform vec2 uDstSize;",
	"uniform float uRotation;",
	
    "void main()",
    "{",
	"  // gl_FragCoord is a pixel position into the texture, divide it down to get 0..1",
	"  vec2 texCoord = gl_FragCoord.xy / uDstSize;",
	"  // get the diffuse colour, the surface normal, and the specular multiplier",
    "  vec4 col = texture2D(uImageSampler, texCoord);",
    "  vec3 nrm = normalize(texture2D(uNormalSampler, texCoord).rgb * 2.0 - 1.0);",
	"  float spc = length(texture2D(uSpecularSampler, texCoord).rgb) * uSpecularMult;",
	"  // lighting calculations...",
	"  float s1 = sin(uRotation);",
	"  float c1 = cos(uRotation);",
	"  vec3 light = normalize(uLightPos);",
	"  vec3 lightRot = normalize(vec3(light.x * c1 - light.y * s1, light.x * s1 + light.y * c1, light.z));",
	"  // angle between light and surface normal dictates brightness",
	"  float b = max(dot(nrm, lightRot), 0.0);",
	"  // angle between reflected light and eye dictates specular",
	"  vec3 ref = reflect(-lightRot, nrm);",
	"  vec3 eye = normalize(vec3(0.5, 0.5, 1.0));",
	"  float s = pow(max(dot(ref, eye), 0.0), spc);",
	"  // combine the various bits to get the pixel colour",
	"  vec3 lightPower = uAmbientCol + uLightCol * b;",
    "  vec3 c = min(lightPower * col.rgb + uSpecularCol * s, vec3(1,1,1));",
    "  gl_FragColor = vec4(c, col.a);",
    "}"
    ],

  "vertex": [
    "precision highp float;",

    "attribute vec4 aPosition;",
	
    "void main(void)",
    "{",
	"  gl_Position = aPosition;",
    "}"
    ],

"attributes":
	[ "aPosition" ],
  "uniforms":
    [ "uLightPos", "uLightCol", "uAmbientCol", "uSpecularCol", "uSpecularMult", "uDstSize", "uRotation"	],
  "samplers":
    [ "uImageSampler", "uNormalSampler", "uSpecularSampler" ]
}


